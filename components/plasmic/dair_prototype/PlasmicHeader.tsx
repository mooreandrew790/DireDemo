// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qncHCyztskarL7v1AeUkze
// Component: 7FDQ0wr_j7
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import Input from "../../Input"; // plasmic-import: Ser-ZhvEk0/component
import Button from "../../Button"; // plasmic-import: zjt3HLSJYPM/component
import StarIconButton from "../../StarIconButton"; // plasmic-import: qssCv0x7a-/component
import AlarmIconButton from "../../AlarmIconButton"; // plasmic-import: Do3GkWIka2/component
import UserSelect from "../../UserSelect"; // plasmic-import: 4xoHljOryBv/component

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dair_prototype.module.css"; // plasmic-import: qncHCyztskarL7v1AeUkze/projectcss
import sty from "./PlasmicHeader.module.css"; // plasmic-import: 7FDQ0wr_j7/css

import GroupIcon from "./icons/PlasmicIcon__Group"; // plasmic-import: _WINM7ZHqb/icon
import VectorIcon from "./icons/PlasmicIcon__Vector"; // plasmic-import: ODLWSNpGGV/icon
import Vector2Icon from "./icons/PlasmicIcon__Vector2"; // plasmic-import: _lO-lUr1Hd/icon
import Vector3Icon from "./icons/PlasmicIcon__Vector3"; // plasmic-import: E772Dqy1uc/icon
import Group2Icon from "./icons/PlasmicIcon__Group2"; // plasmic-import: PvQrHW_RFM/icon
import Searchsvg2Icon from "./icons/PlasmicIcon__Searchsvg2"; // plasmic-import: sLtSOlDebF/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: rFipy3aezVF/icon
import IconIcon from "./icons/PlasmicIcon__Icon"; // plasmic-import: NkYTqbkWRhk/icon

export type PlasmicHeader__VariantMembers = {};

export type PlasmicHeader__VariantsArgs = {};
type VariantPropType = keyof PlasmicHeader__VariantsArgs;
export const PlasmicHeader__VariantProps = new Array<VariantPropType>();

export type PlasmicHeader__ArgsType = {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicHeader__ArgsType;
export const PlasmicHeader__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "endIcon"
);

export type PlasmicHeader__OverridesType = {
  root?: p.Flex<"div">;
  group?: p.Flex<"div">;
  group2?: p.Flex<"div">;
  group3?: p.Flex<"div">;
  group4?: p.Flex<"div">;
  inputSearch?: p.Flex<typeof Input>;
  workspace?: p.Flex<typeof Button>;
  starIconButton?: p.Flex<typeof StarIconButton>;
  alarmIconButton?: p.Flex<typeof AlarmIconButton>;
  userSelect?: p.Flex<typeof UserSelect>;
};

export interface DefaultHeaderProps {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  className?: string;
}

function PlasmicHeader__RenderFunc(props: {
  variants: PlasmicHeader__VariantsArgs;
  args: PlasmicHeader__ArgsType;
  overrides: PlasmicHeader__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    true ? (
      <p.Stack
        as={"div"}
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        hasGap={true}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          sty.root
        )}
      >
        <div
          data-plasmic-name={"group"}
          data-plasmic-override={overrides.group}
          className={classNames(projectcss.all, sty.group)}
        >
          <div
            data-plasmic-name={"group2"}
            data-plasmic-override={overrides.group2}
            className={classNames(projectcss.all, sty.group2)}
          >
            <div
              data-plasmic-name={"group3"}
              data-plasmic-override={overrides.group3}
              className={classNames(projectcss.all, sty.group3)}
            >
              <div
                data-plasmic-name={"group4"}
                data-plasmic-override={overrides.group4}
                className={classNames(projectcss.all, sty.group4)}
              >
                <GroupIcon
                  className={classNames(projectcss.all, sty.svg__maZ6S)}
                  role={"img"}
                />
              </div>

              <VectorIcon
                className={classNames(projectcss.all, sty.svg__ypmWp)}
                role={"img"}
              />

              <Vector2Icon
                className={classNames(projectcss.all, sty.svg__bifZm)}
                role={"img"}
              />

              <Vector3Icon
                className={classNames(projectcss.all, sty.svg__puZoU)}
                role={"img"}
              />
            </div>
          </div>

          <Group2Icon
            className={classNames(projectcss.all, sty.svg__y97Uo)}
            role={"img"}
          />
        </div>

        <div
          className={classNames(
            projectcss.all,
            projectcss.__wab_text,
            sty.text__bvOd
          )}
        >
          <React.Fragment>
            <React.Fragment>{""}</React.Fragment>
            <span
              className={"plasmic_default__all plasmic_default__span"}
              style={{ color: "#FFFFFF" }}
            >
              {"Admin"}
            </span>
            <React.Fragment>{""}</React.Fragment>
          </React.Fragment>
        </div>

        <Input
          data-plasmic-name={"inputSearch"}
          data-plasmic-override={overrides.inputSearch}
          className={classNames("__wab_instance", sty.inputSearch)}
          endIcon={p.renderPlasmicSlot({
            defaultContents: (
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__jswSo)}
                role={"img"}
              />
            ),

            value: args.endIcon
          })}
          startIcon={p.renderPlasmicSlot({
            defaultContents: (
              <Searchsvg2Icon
                className={classNames(projectcss.all, sty.svg___4Ev8O)}
                role={"img"}
              />
            ),

            value: args.startIcon
          })}
        />

        <Button
          data-plasmic-name={"workspace"}
          data-plasmic-override={overrides.workspace}
          className={classNames("__wab_instance", sty.workspace)}
          color={"white" as const}
        >
          <div
            className={classNames(
              projectcss.all,
              projectcss.__wab_text,
              sty.text__u5Lpc
            )}
          >
            {"Create New Workspace"}
          </div>
        </Button>

        {true ? (
          <StarIconButton
            data-plasmic-name={"starIconButton"}
            data-plasmic-override={overrides.starIconButton}
            className={classNames("__wab_instance", sty.starIconButton)}
          />
        ) : null}

        <AlarmIconButton
          data-plasmic-name={"alarmIconButton"}
          data-plasmic-override={overrides.alarmIconButton}
          className={classNames("__wab_instance", sty.alarmIconButton)}
        />

        <UserSelect
          data-plasmic-name={"userSelect"}
          data-plasmic-override={overrides.userSelect}
          className={classNames("__wab_instance", sty.userSelect)}
        />
      </p.Stack>
    ) : null
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: [
    "root",
    "group",
    "group2",
    "group3",
    "group4",
    "inputSearch",
    "workspace",
    "starIconButton",
    "alarmIconButton",
    "userSelect"
  ],
  group: ["group", "group2", "group3", "group4"],
  group2: ["group2", "group3", "group4"],
  group3: ["group3", "group4"],
  group4: ["group4"],
  inputSearch: ["inputSearch"],
  workspace: ["workspace"],
  starIconButton: ["starIconButton"],
  alarmIconButton: ["alarmIconButton"],
  userSelect: ["userSelect"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  group: "div";
  group2: "div";
  group3: "div";
  group4: "div";
  inputSearch: typeof Input;
  workspace: typeof Button;
  starIconButton: typeof StarIconButton;
  alarmIconButton: typeof AlarmIconButton;
  userSelect: typeof UserSelect;
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicHeader__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicHeader__VariantsArgs;
    args?: PlasmicHeader__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicHeader__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicHeader__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicHeader__ArgProps,
          internalVariantPropNames: PlasmicHeader__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicHeader__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicHeader";
  } else {
    func.displayName = `PlasmicHeader.${nodeName}`;
  }
  return func;
}

export const PlasmicHeader = Object.assign(
  // Top-level PlasmicHeader renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    group: makeNodeComponent("group"),
    group2: makeNodeComponent("group2"),
    group3: makeNodeComponent("group3"),
    group4: makeNodeComponent("group4"),
    inputSearch: makeNodeComponent("inputSearch"),
    workspace: makeNodeComponent("workspace"),
    starIconButton: makeNodeComponent("starIconButton"),
    alarmIconButton: makeNodeComponent("alarmIconButton"),
    userSelect: makeNodeComponent("userSelect"),

    // Metadata about props expected for PlasmicHeader
    internalVariantProps: PlasmicHeader__VariantProps,
    internalArgProps: PlasmicHeader__ArgProps
  }
);

export default PlasmicHeader;
/* prettier-ignore-end */
