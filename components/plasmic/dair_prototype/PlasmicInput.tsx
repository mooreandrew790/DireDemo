// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */

/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */

// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: qncHCyztskarL7v1AeUkze
// Component: Ser-ZhvEk0
import * as React from "react";

import Head from "next/head";
import Link, { LinkProps } from "next/link";

import * as p from "@plasmicapp/react-web";
import * as ph from "@plasmicapp/host";

import {
  hasVariant,
  classNames,
  wrapWithClassName,
  createPlasmicElementProxy,
  makeFragment,
  MultiChoiceArg,
  SingleBooleanChoiceArg,
  SingleChoiceArg,
  pick,
  omit,
  useTrigger,
  StrictProps,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";

import "@plasmicapp/react-web/lib/plasmic.css";

import projectcss from "./plasmic_dair_prototype.module.css"; // plasmic-import: qncHCyztskarL7v1AeUkze/projectcss
import sty from "./PlasmicInput.module.css"; // plasmic-import: Ser-ZhvEk0/css

import Searchsvg2Icon from "./icons/PlasmicIcon__Searchsvg2"; // plasmic-import: sLtSOlDebF/icon
import ChecksvgIcon from "./icons/PlasmicIcon__Checksvg"; // plasmic-import: rFipy3aezVF/icon

export type PlasmicInput__VariantMembers = {};

export type PlasmicInput__VariantsArgs = {};
type VariantPropType = keyof PlasmicInput__VariantsArgs;
export const PlasmicInput__VariantProps = new Array<VariantPropType>();

export type PlasmicInput__ArgsType = {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
};

type ArgPropType = keyof PlasmicInput__ArgsType;
export const PlasmicInput__ArgProps = new Array<ArgPropType>(
  "startIcon",
  "endIcon"
);

export type PlasmicInput__OverridesType = {
  root?: p.Flex<"div">;
  startIconContainer?: p.Flex<"div">;
  input?: p.Flex<"input">;
  endIconContainer?: p.Flex<"div">;
};

export interface DefaultInputProps {
  startIcon?: React.ReactNode;
  endIcon?: React.ReactNode;
  className?: string;
}

function PlasmicInput__RenderFunc(props: {
  variants: PlasmicInput__VariantsArgs;
  args: PlasmicInput__ArgsType;
  overrides: PlasmicInput__OverridesType;

  forNode?: string;
}) {
  const { variants, overrides, forNode } = props;

  const $ctx = ph.useDataEnv?.() || {};
  const args = React.useMemo(
    () =>
      Object.assign(
        {},

        props.args
      ),
    [props.args]
  );

  const $props = args;

  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(
        projectcss.all,
        projectcss.root_reset,
        projectcss.plasmic_default_styles,
        projectcss.plasmic_mixins,
        sty.root
      )}
    >
      {true ? (
        <div
          data-plasmic-name={"startIconContainer"}
          data-plasmic-override={overrides.startIconContainer}
          className={classNames(projectcss.all, sty.startIconContainer)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <Searchsvg2Icon
                className={classNames(projectcss.all, sty.svg__zlx8Q)}
                role={"img"}
              />
            ),

            value: args.startIcon,
            className: classNames(sty.slotTargetStartIcon)
          })}
        </div>
      ) : null}

      <input
        data-plasmic-name={"input"}
        data-plasmic-override={overrides.input}
        className={classNames(projectcss.all, projectcss.input, sty.input)}
        placeholder={"Search..." as const}
        type={"text" as const}
      />

      {true ? (
        <div
          data-plasmic-name={"endIconContainer"}
          data-plasmic-override={overrides.endIconContainer}
          className={classNames(projectcss.all, sty.endIconContainer)}
        >
          {p.renderPlasmicSlot({
            defaultContents: (
              <ChecksvgIcon
                className={classNames(projectcss.all, sty.svg__zjNd0)}
                role={"img"}
              />
            ),

            value: args.endIcon
          })}
        </div>
      ) : null}
    </div>
  ) as React.ReactElement | null;
}

const PlasmicDescendants = {
  root: ["root", "startIconContainer", "input", "endIconContainer"],
  startIconContainer: ["startIconContainer"],
  input: ["input"],
  endIconContainer: ["endIconContainer"]
} as const;
type NodeNameType = keyof typeof PlasmicDescendants;
type DescendantsType<T extends NodeNameType> =
  typeof PlasmicDescendants[T][number];
type NodeDefaultElementType = {
  root: "div";
  startIconContainer: "div";
  input: "input";
  endIconContainer: "div";
};

type ReservedPropsType = "variants" | "args" | "overrides";
type NodeOverridesType<T extends NodeNameType> = Pick<
  PlasmicInput__OverridesType,
  DescendantsType<T>
>;
type NodeComponentProps<T extends NodeNameType> =
  // Explicitly specify variants, args, and overrides as objects
  {
    variants?: PlasmicInput__VariantsArgs;
    args?: PlasmicInput__ArgsType;
    overrides?: NodeOverridesType<T>;
  } & Omit<PlasmicInput__VariantsArgs, ReservedPropsType> & // Specify variants directly as props
    // Specify args directly as props
    Omit<PlasmicInput__ArgsType, ReservedPropsType> &
    // Specify overrides for each element directly as props
    Omit<
      NodeOverridesType<T>,
      ReservedPropsType | VariantPropType | ArgPropType
    > &
    // Specify props for the root element
    Omit<
      Partial<React.ComponentProps<NodeDefaultElementType[T]>>,
      ReservedPropsType | VariantPropType | ArgPropType | DescendantsType<T>
    >;

function makeNodeComponent<NodeName extends NodeNameType>(nodeName: NodeName) {
  type PropsType = NodeComponentProps<NodeName> & { key?: React.Key };
  const func = function <T extends PropsType>(
    props: T & StrictProps<T, PropsType>
  ) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: [...PlasmicDescendants[nodeName]],
          internalArgPropNames: PlasmicInput__ArgProps,
          internalVariantPropNames: PlasmicInput__VariantProps
        }),
      [props, nodeName]
    );

    return PlasmicInput__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicInput";
  } else {
    func.displayName = `PlasmicInput.${nodeName}`;
  }
  return func;
}

export const PlasmicInput = Object.assign(
  // Top-level PlasmicInput renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    startIconContainer: makeNodeComponent("startIconContainer"),
    input: makeNodeComponent("input"),
    endIconContainer: makeNodeComponent("endIconContainer"),

    // Metadata about props expected for PlasmicInput
    internalVariantProps: PlasmicInput__VariantProps,
    internalArgProps: PlasmicInput__ArgProps
  }
);

export default PlasmicInput;
/* prettier-ignore-end */
